from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_db
from auth import authenticate_user
from models import AIChatHistory
import config

bot = Bot(token=config.TELEGRAM_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AuthStates(StatesGroup):
    email = State()
    password = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
auth_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîë –í–æ–π—Ç–∏")]],
    resize_keyboard=True
)

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")],
        [KeyboardButton(text="üö™ –í—ã–π—Ç–∏")],
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.",
        reply_markup=auth_keyboard
    )

@dp.message(F.text == "üîë –í–æ–π—Ç–∏")
async def cmd_login(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    await state.set_state(AuthStates.email)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(AuthStates.email)
async def process_email(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ email"""
    await state.update_data(email=message.text)
    await state.set_state(AuthStates.password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")

@dp.message(AuthStates.password)
async def process_password(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"""
    user_data = await state.get_data()
    email = user_data['email']
    password = message.text
    
    async with get_db() as session:
        user = await authenticate_user(session, email, password)
    
    if not user:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        await state.clear()
        return
    
    await state.update_data(user_id=user.id)
    await message.answer(
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!",
        reply_markup=main_keyboard
    )
    await state.clear()

@dp.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
async def cmd_history(message: types.Message):
    """–í—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with get_db() as session:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å user_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –ë–î
        # –ó–¥–µ—Å—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        result = await session.execute(select(AIChatHistory).limit(10))
        history = result.scalars().all()
    
    if not history:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞")
        return
    
    response = ["üìö –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n"]
    for item in history:
        response.append(
            f"üïí {item.timestamp.strftime('%Y-%m-%d %H:%M')}\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å: {item.prompt[:100]}...\n"
            f"üí° –û—Ç–≤–µ—Ç: {item.response[:100]}...\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        )
    
    await message.answer("\n".join(response))

@dp.message(F.text == "üö™ –í—ã–π—Ç–∏")
async def cmd_logout(message: types.Message):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    await message.answer(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
        reply_markup=auth_keyboard
    )