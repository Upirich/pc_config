from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy import select
from database import AsyncSessionLocal
from auth import authenticate_user
from models import User, AIChatHistory
import config


bot = Bot(token='7127595559:AAFCh9LzAiNJmehxIezib9NJFfiQnWUJIzA')
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class AuthStates(StatesGroup):
    email = State()
    password = State()

auth_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîë –í–æ–π—Ç–∏")]],
    resize_keyboard=True
)

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")],
        [KeyboardButton(text="üö™ –í—ã–π—Ç–∏")],
    ],
    resize_keyboard=True
)

# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data_store = {}

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.",
        reply_markup=auth_keyboard
    )

@dp.message(F.text == "üîë –í–æ–π—Ç–∏")
async def cmd_login(message: types.Message, state: FSMContext):
    await state.set_state(AuthStates.email)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(AuthStates.email)
async def process_email(message: types.Message, state: FSMContext):
    email = message.text.strip()
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(select(User).where(User.email == email))
            user_exists = result.scalar_one_or_none() is not None
            
            if not user_exists:
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ 'üîë –í–æ–π—Ç–∏' —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                    reply_markup=auth_keyboard
                )
                await state.clear()
                return
                
            await state.update_data(email=email)
            await state.set_state(AuthStates.password)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=auth_keyboard
        )
        await state.clear()

@dp.message(AuthStates.password)
async def process_password(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        email = user_data['email']
        password = message.text
        
        async with AsyncSessionLocal() as session:
            user = await authenticate_user(session, email, password)
            
            if not user:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ù–∞–∂–º–∏—Ç–µ 'üîë –í–æ–π—Ç–∏' —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                    reply_markup=auth_keyboard
                )
                await state.clear()
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            user_data_store[message.from_user.id] = {"user_id": user.id}
            
            await message.answer(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!",
                reply_markup=main_keyboard
            )
            await state.clear()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=auth_keyboard
        )
        await state.clear()

@dp.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
async def cmd_history(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if message.from_user.id not in user_data_store:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å",
            reply_markup=auth_keyboard
        )
        return
    
    user_id = user_data_store[message.from_user.id]["user_id"]
    
    try:
        async with AsyncSessionLocal() as session:
            history = await session.execute(
                select(AIChatHistory)
                .where(AIChatHistory.user_id == user_id)
                .order_by(AIChatHistory.timestamp.desc())
                .limit(10)
            )
            history_items = history.scalars().all()
        
        if not history_items:
            await message.answer(
                "üì≠ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞",
                reply_markup=main_keyboard
            )
            return
        
        response = ["üìö –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n"]
        for item in history_items:
            response.append(
                f"üïí {item.timestamp.strftime('%Y-%m-%d %H:%M')}\n"
                f"‚ùì –í–æ–ø—Ä–æ—Å: {item.prompt[:100]}...\n"
                f"üí° –û—Ç–≤–µ—Ç: {item.response[:100]}...\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )
        
        await message.answer("\n".join(response))
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
            reply_markup=main_keyboard
        )

@dp.message(F.text == "üö™ –í—ã–π—Ç–∏")
async def cmd_logout(message: types.Message):
    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if message.from_user.id in user_data_store:
        del user_data_store[message.from_user.id]
    
    await message.answer(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.",
        reply_markup=auth_keyboard
    )