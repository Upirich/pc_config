from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from typing import Union
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy import select
from database import AsyncSessionLocal
from auth_tg import authenticate_user
from models import User, AIRequestChat
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import InputFile, BufferedInputFile
import requests


class YandexSpeechKit:
    def __init__(self, api_key, folder_id):
        self.api_key = api_key
        self.folder_id = folder_id
        self.url = "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"

    def synthesize(self, text, voice="alena", format="oggopus"):
        headers = {"Authorization": f"Api-Key {self.api_key}"}
        data = {
            "text": text,
            "voice": voice,
            "folderId": self.folder_id,
            "format": format,
        }
        response = requests.post(self.url, headers=headers, data=data)
        return response.content if response.status_code == 200 else None


# SPEECHKIT_API_KEY = "AQVN1-bH8__4Zl61UV8cCMquwlivOcF9rveueJBe"
# FOLDER_ID = "b1g4nqubucfntfi07tr9"  # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
VOICE = "alena"  # –ì–æ–ª–æ—Å –ê–ª–∏—Å—ã

speechkit = YandexSpeechKit(
    api_key="AQVN1-bH8__4Zl61UV8cCMquwlivOcF9rveueJBe", folder_id="b1g4nqubucfntfi07tr9"
)


async def text_to_speech(text: str, chat_id: int) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    try:
        audio = speechkit.synthesize(text=text, voice=VOICE, format="oggopus")
        filename = f"voice_{chat_id}.ogg"
        with open(filename, "wb") as f:
            f.write(audio)
        return filename
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
        return None


bot = Bot(token="7127595559:AAFCh9LzAiNJmehxIezib9NJFfiQnWUJIzA")
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


class AuthStates(StatesGroup):
    email = State()
    password = State()


auth_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîë –í–æ–π—Ç–∏")]], resize_keyboard=True
)

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")],
        [KeyboardButton(text="üö™ –í—ã–π—Ç–∏")],
    ],
    resize_keyboard=True,
)

# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data_store = {}


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.",
        reply_markup=auth_keyboard,
    )


@dp.message(F.text == "üîë –í–æ–π—Ç–∏")
async def cmd_login(message: types.Message, state: FSMContext):
    await state.set_state(AuthStates.email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=types.ReplyKeyboardRemove())


@dp.message(AuthStates.email)
async def process_email(message: types.Message, state: FSMContext):
    email = message.text.strip()
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(select(User).where(User.email == email))
            user_exists = result.scalar_one_or_none() is not None

            if not user_exists:
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ 'üîë –í–æ–π—Ç–∏' —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                    reply_markup=auth_keyboard,
                )
                await state.clear()
                return

            await state.update_data(email=email)
            await state.set_state(AuthStates.password)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=auth_keyboard
        )
        await state.clear()


@dp.message(AuthStates.password)
async def process_password(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        email = user_data["email"]
        password = message.text

        async with AsyncSessionLocal() as session:
            user = await authenticate_user(session, email, password)

            if not user:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=auth_keyboard
                )
                await state.clear()
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            user_data_store[message.from_user.id] = {"user_id": user.id}

            await message.answer(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", reply_markup=main_keyboard
            )
            await state.clear()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=auth_keyboard
        )
        await state.clear()


@dp.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
async def cmd_history(message: types.Message):
    if message.from_user.id not in user_data_store:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å", reply_markup=auth_keyboard)
        return

    user_id = user_data_store[message.from_user.id]["user_id"]

    try:
        async with AsyncSessionLocal() as session:
            history = await session.execute(
                select(AIRequestChat)
                .where(AIRequestChat.user_id == user_id)
                .order_by(AIRequestChat.created_at.desc())
                .limit(10)
            )
            history_items = history.scalars().all()

        if not history_items:
            await message.answer(
                "üì≠ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞", reply_markup=main_keyboard
            )
            return

        response = ["üìö –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤:\n"]
        for item in history_items:
            response.append(
                f"üïí {item.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚ùì –í–æ–ø—Ä–æ—Å: {item.request_text[:100]}{'...' if len(item.request_text) > 100 else ''}\n"
                f"üí° –û—Ç–≤–µ—Ç: {item.response_text[:100]}{'...' if len(item.response_text) > 100 else ''}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–ª—É—à–∞—Ç—å"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç", callback_data="play_last"
                    )
                ]
            ]
        )

        await message.answer("\n".join(response), reply_markup=keyboard)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", reply_markup=main_keyboard
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–ª—É—à–∞—Ç—å"
@dp.callback_query(F.data == "play_last")
async def play_last_answer(callback: types.CallbackQuery):
    try:
        if callback.from_user.id not in user_data_store:
            await callback.answer("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", show_alert=True)
            return

        user_id = user_data_store[callback.from_user.id]["user_id"]

        async with AsyncSessionLocal() as session:
            history = await session.execute(
                select(AIRequestChat)
                .where(AIRequestChat.user_id == user_id)
                .order_by(AIRequestChat.created_at.desc())
                .limit(10)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–∑–≤—É—á–∫–∏
            )
            history_items = history.scalars().all()

            if not history_items:
                await callback.answer("‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–∑–≤—É—á–∫–∏", show_alert=True)
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
            full_text = "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n"
            for i, item in enumerate(
                reversed(history_items), 1
            ):  # –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
                full_text += (
                    f"–ó–∞–ø—Ä–æ—Å {i} –æ—Ç {item.created_at.strftime('%d.%m.%Y %H:%M')}:\n"
                    f"–í–æ–ø—Ä–æ—Å: {item.request_text}\n"
                    f"–û—Ç–≤–µ—Ç: {item.response_text}\n\n"
                )

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 5000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è SpeechKit)
            full_text = full_text[:5000]

            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å
            audio_data = await text_to_speech_bytes(full_text)

            if audio_data:
                voice_message = BufferedInputFile(
                    file=audio_data, filename="history.ogg"
                )
                await callback.message.answer_voice(
                    voice=voice_message, caption="–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
                )
            else:
                await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏", show_alert=True)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def text_to_speech_bytes(text: str) -> Union[bytes, None]:
    try:
        audio = speechkit.synthesize(text=text, voice="alena", format="oggopus")
        return audio
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
        return None


@dp.message(F.text == "üö™ –í—ã–π—Ç–∏")
async def cmd_logout(message: types.Message):
    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if message.from_user.id in user_data_store:
        del user_data_store[message.from_user.id]

    await message.answer(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.",
        reply_markup=auth_keyboard,
    )
